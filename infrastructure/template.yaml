AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "A template to create the GOV.UK One login Account backend infrastructure."

Parameters:
  UserServicesStoreTableName:
    Type: String
    Default: user_services
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue

Resources:
  ######################################
  # Dynamo DB - Output target for system
  ######################################
  UserServicesStore:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref UserServicesStoreTableName
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Account Management Backend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: Source
          Value: "https://github.com/alphagov/di-account-management-backend/blob/main/infrastructre/template.yaml"
      PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DatabaseKmsKey.Arn

  ######################################
  # TxMA Event Queue (Dummy for now)
  ######################################
  TxMAInputDummyQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  ######################
  # Querying the Record
  ######################
  QueryUserServicesFunction:
    DependsOn:
      - QueryUserServicesFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      Architectures: ["x86_64"]
      CodeUri: ../lambda/query-user-services/
      Events:
        TxMAInputDummyQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt TxMAInputDummyQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt QueryUserServicesDeadLetterQueue.Arn
      Handler: query-user-services.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      Runtime: nodejs16.x
      Role: !GetAtt QueryUserServicesRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref UserServicesStoreTableName
          DLQ_URL: !Ref QueryUserServicesDeadLetterQueue
          OUTPUT_QUEUE_URL: !Ref UserServicesToFormatQueue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - query-user-services.ts

  QueryUserServicesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-query-user-service-log-group"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  QueryUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  QueryUserServicesRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref QueryUserServicesPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  QueryUserServicesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Resource: !GetAtt TxMAInputDummyQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt UserServicesToFormatQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt QueryUserServicesDeadLetterQueue.Arn
        - Effect: Allow
          Action:
          - dynamodb:Query
          - dynamodb:GetItem
          Resource:
          - !GetAtt UserServicesStore.Arn
          - !Sub
            - '${Arn}/*'
            - Arn: !GetAtt UserServicesStore.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt QueueKmsKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt LoggingKmsKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt LambdaKMSKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt DatabaseKmsKey.Arn

  UserServicesToFormatQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  QueryDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "-", [ !Ref AWS::StackName, !Ref Environment, QueryDeadLetterQueueAlarm ] ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt QueryUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  #######################
  # Formatting the Record
  #######################
  FormatUserServicesFunction:
    DependsOn:
      - FormatUserServicesFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      Architectures: ["x86_64"]
      CodeUri: ../lambda/format-user-services/
      Events:
        UserServicesToFormatQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserServicesToFormatQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FormatUserServicesDeadLetterQueue.Arn
      Handler: format-user-services.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      Runtime: nodejs16.x
      Role: !GetAtt FormatUserServicesRole.Arn
      Timeout: 5
      Environment:
        Variables:
          DLQ_URL: !Ref FormatUserServicesDeadLetterQueue
          OUTPUT_QUEUE_URL: !Ref UserServicesToWriteQueue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - format-user-services.ts

  FormatUserServicesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-format-user-service-log-group"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn


  FormatUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  FormatUserServicesRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref FormatUserServicesPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  FormatUserServicesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Resource: !GetAtt UserServicesToFormatQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt FormatUserServicesDeadLetterQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt UserServicesToWriteQueue.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt QueueKmsKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt LoggingKmsKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt LambdaKMSKey.Arn

  UserServicesToWriteQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  FormatDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "-", [ !Ref AWS::StackName, !Ref Environment, FormatDeadLetterQueueAlarm ] ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt FormatUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  ###################
  # Write the Record
  ###################
  WriteUserServicesFunction:
    DependsOn:
      - WriteUserServicesFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      Architectures: ["x86_64"]
      CodeUri: ../lambda/write-user-services/
      Events:
        UserServicesToWriteQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserServicesToWriteQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt WriteUserServicesDeadLetterQueue.Arn
      Handler: write-user-services.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      Runtime: nodejs16.x
      Role: !GetAtt WriteServiceRecordRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref UserServicesStoreTableName
          DLQ_URL: !Ref WriteUserServicesDeadLetterQueue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - write-user-services.ts

  WriteUserServicesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-write-user-service-log-group"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn


  WriteUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  WriteServiceRecordRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref WriteServiceRecordPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  WriteServiceRecordPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Resource: !GetAtt UserServicesToWriteQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt WriteUserServicesDeadLetterQueue.Arn
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Resource:
          - !GetAtt UserServicesStore.Arn
          - !Sub
            - '${Arn}/*'
            - Arn: !GetAtt UserServicesStore.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt QueueKmsKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt LoggingKmsKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt LambdaKMSKey.Arn
        - Effect: Allow
          Action:
          - kms:*
          Resource: !GetAtt DatabaseKmsKey.Arn

  WriteDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "-", [ !Ref AWS::StackName, !Ref Environment, WriteDeadLetterQueueAlarm ] ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt WriteUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  #######################
  # Monitoring
  #######################
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  AlarmNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AlarmNotificationTopic
      PolicyDocument:
        Statement:
          - Action: "sns:Publish"
            Effect: Allow
            Resource: !Ref AlarmNotificationTopic
            Principal:
              Service: cloudwatch.amazonaws.com

  QueueKmsKey:
      Type: AWS::KMS::Key
      Properties:
        EnableKeyRotation: true
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
              Action: kms:*
              Resource:
                - '*'
            - Effect: Allow
              Principal:
                AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
              Action:
                - kms:*
              Resource:
                - '*'
            - Effect: Allow
              Principal:
                Service: cloudwatch.amazonaws.com
              Action: kms:*
              Resource:
                - '*'
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: kms:*
              Resource:
                - '*'

  QueueKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/QueueKmsKey"
      TargetKeyId: !Ref QueueKmsKey

  DatabaseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'kms:*'
            Resource: '*'

  DatabaseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/DatabaseKmsKey"
      TargetKeyId: !Ref DatabaseKmsKey

  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'kms:*'
            Resource: '*'

  LambdaKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LambdaKMSKey"
      TargetKeyId: !Ref LambdaKMSKey

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  LoggingKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LoggingKmsKey"
      TargetKeyId: !Ref LoggingKmsKey

  DeadLetterEmailSubscriptions:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: govuk-accounts-developers@digital.cabinet-office.gov.uk
      Protocol: email
      TopicArn: !Ref AlarmNotificationTopic
