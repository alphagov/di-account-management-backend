AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "A template to create the GOV.UK One login Account backend infrastructure."

Parameters:
  UserServicesStoreTableName:
    Type: String
    Default: user_services
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  SlackWorkspaceId:
    Description: >
      The ID of the Slack workspace where build notification messages are
      posted. This is retrieved from the AWS Chatbot integration.
    Type: String
    Default: "T8GT9416G"
    AllowedPattern: "\\w+"
    ConstraintDescription: "must be an AWS Chatbot Slack workspace ID"

  SlackChannelId:
    Description: >
      The ID of the Slack channel where build notification messages are posted.
      This is taken from the channel details in Slack.
    Type: String
    AllowedPattern: "\\w+"
    ConstraintDescription: "must be a Slack channel ID"

Resources:
  ######################################
  # Dynamo DB - Output target for system
  ######################################
  UserServicesStore:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref UserServicesStoreTableName
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Account Management Backend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: Source
          Value: "https://github.com/alphagov/di-account-management-backend/blob/main/infrastructre/template.yaml"

  ######################################
  # TxMA Event Queue (Dummy for now)
  ######################################
  TxMAInputDummyQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  ######################
  # Querying the Record
  ######################
  QueryUserServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: ["x86_64"]
      CodeUri: ../lambda/query-user-services/
      Events:
        TxMAInputDummyQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt TxMAInputDummyQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt QueryUserServicesDeadLetterQueue.Arn
      Handler: query-user-services.handler
      PackageType: Zip
      MemorySize: 128
      Runtime: nodejs16.x
      Role: !GetAtt QueryUserServicesRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref UserServicesStoreTableName
          DLQ_URL: !Ref QueryUserServicesDeadLetterQueue
          OUTPUT_QUEUE_URL: !Ref UserServicesToFormatQueue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - query-user-services.ts

  QueryUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600

  QueryUserServicesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref QueryUserServicesPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  QueryUserServicesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Resource: !GetAtt TxMAInputDummyQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt UserServicesToFormatQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt QueryUserServicesDeadLetterQueue.Arn
        - Effect: Allow
          Action:
          - dynamodb:Query
          - dynamodb:GetItem
          Resource:
          - !GetAtt UserServicesStore.Arn
          - !Sub
            - '${Arn}/*'
            - Arn: !GetAtt UserServicesStore.Arn

  UserServicesToFormatQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  QueryDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "-", [ !Ref AWS::StackName, !Ref Environment, QueryDeadLetterQueueAlarm ] ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt QueryUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  #######################
  # Formatting the Record
  #######################
  FormatUserServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: ["x86_64"]
      CodeUri: ../lambda/format-user-services/
      Events:
        UserServicesToFormatQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserServicesToFormatQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FormatUserServicesDeadLetterQueue.Arn
      Handler: format-user-services.handler
      PackageType: Zip
      MemorySize: 128
      Runtime: nodejs16.x
      Role: !GetAtt FormatUserServicesRole.Arn
      Timeout: 5
      Environment:
        Variables:
          DLQ_URL: !Ref FormatUserServicesDeadLetterQueue
          OUTPUT_QUEUE_URL: !Ref UserServicesToWriteQueue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - format-user-services.ts

  FormatUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600

  FormatUserServicesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref FormatUserServicesPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  FormatUserServicesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Resource: !GetAtt UserServicesToFormatQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt FormatUserServicesDeadLetterQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt UserServicesToWriteQueue.Arn

  UserServicesToWriteQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  FormatDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "-", [ !Ref AWS::StackName, !Ref Environment, FormatDeadLetterQueueAlarm ] ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt FormatUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  ###################
  # Write the Record
  ###################
  WriteUserServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: ["x86_64"]
      CodeUri: ../lambda/write-user-services/
      Events:
        UserServicesToWriteQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserServicesToWriteQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt WriteUserServicesDeadLetterQueue.Arn
      Handler: write-user-services.handler
      PackageType: Zip
      MemorySize: 128
      Runtime: nodejs16.x
      Role: !GetAtt WriteServiceRecordRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref UserServicesStoreTableName
          DLQ_URL: !Ref WriteUserServicesDeadLetterQueue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - write-user-services.ts

  WriteUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600

  WriteServiceRecordRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref WriteServiceRecordPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  WriteServiceRecordPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Resource: !GetAtt UserServicesToWriteQueue.Arn
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !GetAtt WriteUserServicesDeadLetterQueue.Arn
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Resource:
          - !GetAtt UserServicesStore.Arn
          - !Sub
            - '${Arn}/*'
            - Arn: !GetAtt UserServicesStore.Arn

  WriteDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "-", [ !Ref AWS::StackName, !Ref Environment, WriteDeadLetterQueueAlarm ] ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt WriteUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  #######################
  # Monitoring
  #######################
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic

  AlarmNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AlarmNotificationTopic
      PolicyDocument:
        Statement:
          - Action: "sns:Publish"
            Effect: Allow
            Resource: !Ref AlarmNotificationTopic
            Principal:
              Service: cloudwatch.amazonaws.com

  ChatbotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "chatbot.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  ChatbotChannelConfiguration:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Properties:
      ConfigurationName: !Sub "${AWS::StackName}-slack-notifications"
      IamRoleArn: !GetAtt ChatbotRole.Arn
      SlackChannelId: !Ref SlackChannelId
      SlackWorkspaceId: !Ref SlackWorkspaceId
      SnsTopicArns:
        - !Ref AlarmNotificationTopic
